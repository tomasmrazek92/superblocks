{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/integrations.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "window.fsAttributes = window.fsAttributes || [];\n\n// FS Load\nwindow.fsAttributes.push([\n  'cmsload',\n  (filterInstances) => {\n    console.log('cmsfilter Successfully loaded!');\n\n    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\n    const [filterInstance] = filterInstances;\n\n    // Categories\n    let categories = [];\n\n    function addKeyword(keyword) {\n      categories.push(keyword);\n    }\n\n    // Add all references\n    filterInstance.items.forEach((element) => {\n      addKeyword(element.props.category.values.values().next().value);\n    });\n\n    // Count different categories\n    function countKeywords(keywordsArray) {\n      return keywordsArray.reduce((acc, keyword) => {\n        acc[keyword] = (acc[keyword] || 0) + 1;\n        return acc;\n      }, {});\n    }\n    const keywordCounts = countKeywords(categories);\n\n    // Add the associated count\n    $('[total-count]').text(filterInstance.items.length);\n    $('.intgr-types_item').each(function () {\n      // In each '.intgr-types_item', find the span and get its text\n      var spanText = $(this).find('span').text();\n\n      // Check if the span's text matches one of the keywords\n      if (keywordCounts[spanText] !== undefined) {\n        // Find the '.small-tag' within the current '.intgr-types_item' and update its text\n        $(this).find('.small-tag').text(keywordCounts[spanText]);\n      }\n    });\n  },\n]);\n\n// FS Filter\nwindow.fsAttributes.push([\n  'cmsfilter',\n  (filterInstances) => {\n    // The callback passes a `filterInstances` array with all the `CMSFilters` instances on the page.\n    const [filterInstance] = filterInstances;\n\n    // The `renderitems` event runs whenever the list renders items after filtering.\n    filterInstance.listInstance.on('renderitems', function () {\n      // Case if there are no items\n      let items = filterInstance.listInstance.validItems.length;\n      items === 0 ? hideSidePanel(true) : hideSidePanel(false);\n\n      togglePagination();\n    });\n  },\n]);\n\n// Function\nfunction togglePagination() {\n  if ($('.blog-index_pagination-box').find('[fs-cmsload-element=\"page-button\"]').length <= 1) {\n    $('.w-pagination-wrapper').hide();\n  } else {\n    $('.w-pagination-wrapper').css('display', 'flex');\n  }\n}\n\nfunction hideSidePanel(state) {\n  if (state) {\n    $('.intgr-types_wrap').css({\n      height: '0px',\n      width: '0px',\n      'padding-left': '0px',\n      'padding-right': '0px',\n    });\n  } else {\n    $('.intgr-types_wrap').attr('style', '');\n  }\n}\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,SAAO,eAAe,OAAO,gBAAgB,CAAC;AAG9C,SAAO,aAAa,KAAK;AAAA,IACvB;AAAA,IACA,CAAC,oBAAoB;AACnB,cAAQ,IAAI,gCAAgC;AAG5C,YAAM,CAAC,cAAc,IAAI;AAGzB,UAAI,aAAa,CAAC;AAElB,eAAS,WAAW,SAAS;AAC3B,mBAAW,KAAK,OAAO;AAAA,MACzB;AAGA,qBAAe,MAAM,QAAQ,CAAC,YAAY;AACxC,mBAAW,QAAQ,MAAM,SAAS,OAAO,OAAO,EAAE,KAAK,EAAE,KAAK;AAAA,MAChE,CAAC;AAGD,eAAS,cAAc,eAAe;AACpC,eAAO,cAAc,OAAO,CAAC,KAAK,YAAY;AAC5C,cAAI,OAAO,KAAK,IAAI,OAAO,KAAK,KAAK;AACrC,iBAAO;AAAA,QACT,GAAG,CAAC,CAAC;AAAA,MACP;AACA,YAAM,gBAAgB,cAAc,UAAU;AAG9C,QAAE,eAAe,EAAE,KAAK,eAAe,MAAM,MAAM;AACnD,QAAE,mBAAmB,EAAE,KAAK,WAAY;AAEtC,YAAI,WAAW,EAAE,IAAI,EAAE,KAAK,MAAM,EAAE,KAAK;AAGzC,YAAI,cAAc,QAAQ,MAAM,QAAW;AAEzC,YAAE,IAAI,EAAE,KAAK,YAAY,EAAE,KAAK,cAAc,QAAQ,CAAC;AAAA,QACzD;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAGD,SAAO,aAAa,KAAK;AAAA,IACvB;AAAA,IACA,CAAC,oBAAoB;AAEnB,YAAM,CAAC,cAAc,IAAI;AAGzB,qBAAe,aAAa,GAAG,eAAe,WAAY;AAExD,YAAI,QAAQ,eAAe,aAAa,WAAW;AACnD,kBAAU,IAAI,cAAc,IAAI,IAAI,cAAc,KAAK;AAEvD,yBAAiB;AAAA,MACnB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAGD,WAAS,mBAAmB;AAC1B,QAAI,EAAE,4BAA4B,EAAE,KAAK,oCAAoC,EAAE,UAAU,GAAG;AAC1F,QAAE,uBAAuB,EAAE,KAAK;AAAA,IAClC,OAAO;AACL,QAAE,uBAAuB,EAAE,IAAI,WAAW,MAAM;AAAA,IAClD;AAAA,EACF;AAEA,WAAS,cAAc,OAAO;AAC5B,QAAI,OAAO;AACT,QAAE,mBAAmB,EAAE,IAAI;AAAA,QACzB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB;AAAA,MACnB,CAAC;AAAA,IACH,OAAO;AACL,QAAE,mBAAmB,EAAE,KAAK,SAAS,EAAE;AAAA,IACzC;AAAA,EACF;",
  "names": []
}
